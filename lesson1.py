# Create a list of strings: fellowship
fellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas', 'boromir', 'gimli']

# Create dict comprehension: new_fellowship
new_fellowship = {member: len(member) for member in fellowship}

# Print the new dictionary
print(new_fellowship)


# Comprehentions - store list in memory
#Generators - return it when needed. Gen Object does not include the entire list.
# Use yield instead of print or return

# Create generator object: result
result = (num for num in range(31))

# Print the first 5 values
print(next(result))
print(next(result))
print(next(result))
print(next(result))
print(next(result))

# Print the rest of the values
for value in result:
    print(value)


# Create a list of strings: lannister
lannister = ['cersei', 'jaime', 'tywin', 'tyrion', 'joffrey']

# Create a generator object: lengths
lengths = (len(person) for person in lannister)

# Iterate over and print the values in lengths
for value in lengths:
    print(value)


# Create a list of strings
lannister = ['cersei', 'jaime', 'tywin', 'tyrion', 'joffrey']

# Define generator function get_lengths
def get_lengths(input_list):
    """Generator function that yields the
    length of the strings in input_list."""

    # Yield the length of a string
    for person in input_list:
        yield len(person)

# Print the values generated by get_lengths()
for value in get_lengths(lannister):
    print(value)



    """
    You will now make use of what you've learned from this chapter to solve a simple data extraction problem. 
    You will also be introduced to a data structure, the pandas Series, in this exercise. 
    We won't elaborate on it much here, but what you should know is that it is a data structure that you 
    will be working with a lot of times when analyzing data from pandas DataFrames. 
    You can think of DataFrame columns as single-dimension arrays called Series.

    In this exercise, you will be using a list comprehension to extract the time from time-stamped Twitter data. The pandas package has been imported as pd and the file 'tweets.csv' has been imported as the df DataFrame for your use.
    Extract the column 'created_at' from df and assign the result to tweet_time. Fun fact: the extracted column in tweet_time here is a Series data structure!
    Create a list comprehension that extracts the time from each row in tweet_time. 
    Each row is a string that represents a timestamp, and you will access the 12th to 19th characters in the string to extract the time. 
    Use entry as the iterator variable and assign the result to tweet_clock_time. Remember that Python uses 0-based indexing!
    
    """

    # Extract the created_at column from df: tweet_time
    tweet_time = df['created_at']

    # Extract the clock time: tweet_clock_time
    tweet_clock_time = [entry[11:19] for entry in tweet_time]

    # Print the extracted times
    print(tweet_time)
    # print(tweet_clock_time)

    # Extract the created_at column from df: tweet_time
    tweet_time = df['created_at']

    # Extract the clock time: tweet_clock_time
    tweet_clock_time = [entry[11:19] for entry in tweet_time if entry[17:19] == '19']

    # Print the extracted times
    print(tweet_time)
    # print(tweet_clock_time)





